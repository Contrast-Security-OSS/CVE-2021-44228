######################################################################
# Copyright [2021] Contrast Security, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# DESCRIPTION:
#
# A script to aid in the identification of affected Java applications
# in TeamServer impacted by CVE-2021-44228 (log4j RCE vulnerability)
#
# PREREQUISITE:
#
# Requires a TeamServer user with view access to all applications and
# a valide API key and AUTH token
#
# @author   prashant.mishra@contrastsecurity.com
#
#####################################################################

# ===================================================================
# Variables. Edit for your Connection Details as per TS.
# ===================================================================

<#

.SYNOPSIS
This script exports library details from Contrast Team Server

.DESCRIPTION
This script exports library details from Contrast Team Server, It expects a user with the view access to the application. It supports following parameters;
Connectivity Parameters
   -CONTRAST_API_URL <value>, Contrast api url till api/ng e.g.https://app.contrastsecurity.com/Contrast/api/ng https://app.contrastsecurity.com/Contrast/api/ng
   -CONTRAST_AUTH_TOKEN <value>, Contrast user authentication token. It can also be passed through environment variable CONTRAST_AUTH_TOKEN
   -CONTRAST_API_KEY <value>, Contrast API key, It can also be passed through environment variable CONTRAST_API_KEY
   -CONTRAST_ORG_ID <value>, Contrast Org ID, It can also be passed through environment variable CONTRAST_ORG_ID
   -CONTRAST_APP_ID <value>, Contrast Application ID, It can also be passed through environment variable CONTRAST_APP_ID
   -$LIBRARY_NAME <value>, Library name or part of name 

It will generate a CSV file containing the library details in current working directory


.EXAMPLE
./export-library-details.ps1 

#>

Param
 (
    $CONTRAST_API_URL=$ENV:CONTRAST_API_URL,
    $CONTRAST_AUTH_TOKEN=$env:CONTRAST_AUTH_TOKEN,
    $CONTRAST_API_KEY=$env:CONTRAST_API_KEY,
    $CONTRAST_ORG_ID=$env:CONTRAST_ORG_ID,
    $LIBRARY_NAME=$null
)
function Add-Log( $MESSAGE, $FILE, $APPEND ) {
    $TIMESTAMP="[{0:MM/dd/yy} {0:HH:mm:ss}]" -f (Get-Date)
    if( $APPEND -eq "Create" ){
        Write-Output "$TIMESTAMP $MESSAGE"| Out-file $FILE 
    }else{
        Write-Output "$TIMESTAMP $MESSAGE"| Out-file $FILE -Append
    }
    Write-Host "$TIMESTAMP $MESSAGE"
}

function New-Dir-If-Not-Exist ($DIR ){
    if(!(Test-Path -Path $DIR)) {
        New-Item -ItemType Directory -Force -Path $DIR
    }
}

function Get-Current-Time( ) {
    $DATE = (Get-Date)
    $YEAR = $DATE.Year
    $MONTH = $DATE.MONTH
    $DAY = $DATE.DAY
    return "$YEAR$MONTH$DAY"
}


function Get-LibraryForOrg($CONTRAST_API_URL, $CONTRAST_ORG_ID, $CONTRAST_AUTH_TOKEN, $CONTRAST_API_KEY, $INDEX, $LIMIT, $LIB_NAME) {
    $LIBS = @()
    $REQUEST_FILTER = @{
        quickFilter = "ALL"
        q = "$LIB_NAME"
    }
    $REQUEST_BODY = $REQUEST_FILTER | ConvertTo-Json
    $RESPONSE_LIB_LIST = Invoke-RestMethod "$CONTRAST_API_URL/$CONTRAST_ORG_ID/libraries/filter?offset=$INDEX&limit=$LIMIT&sort=score&expand=skip_links,apps,server,vulns,manifest,status,usage_counts" -Method POST -ContentType "application/json" -Headers @{"Authorization"="$CONTRAST_AUTH_TOKEN";"API-Key"="$CONTRAST_API_KEY"} -Body $REQUEST_BODY

    if ( $RESPONSE_LIB_LIST.success ) {
        Add-Log " Ognization libs details fetched successfully from $INDEX to $LIMIT." $LOG_FILE
        
        if (($INDEX + $LIMIT) -le $RESPONSE_LIB_LIST.count) {
            $LIBS += Get-LibraryForOrg $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY ($INDEX + $LIMIT) $LIMIT $LIB_NAME
        }
        else {
            return $RESPONSE_LIB_LIST.libraries
        }

        $LIBS += $RESPONSE_LIB_LIST.libraries
        return $LIBS
    }
}


function Get-Groups-For-Org($CONTRAST_API_URL, $CONTRAST_ORG_ID, $CONTRAST_AUTH_TOKEN, $CONTRAST_API_KEY, $INDEX, $LIMIT) {
    $GROUPS = @()
    $RESPONSE_GROUP_LIST = Invoke-RestMethod "$CONTRAST_API_URL/$CONTRAST_ORG_ID/groups?expand=users,applications,skip_links&sort=name&offset=$INDEX&limit=$LIMIT" -Method GET -ContentType "application/json" -Headers @{"Authorization" = "$CONTRAST_AUTH_TOKEN"; "API-Key" = "$CONTRAST_API_KEY" } 

    if ( $RESPONSE_GROUP_LIST.success ) {
        Add-Log " Ognization groups details fetched successfully from $INDEX to $LIMIT." $LOG_FILE
        
        if (($INDEX + $LIMIT) -le $RESPONSE_GROUP_LIST.custom_groups.count) {
            $GROUPS += Get-Groups-For-Org $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY ($INDEX + $LIMIT) $LIMIT
        }
        else {
            return $RESPONSE_GROUP_LIST.custom_groups.groups
        }

        $GROUPS += $RESPONSE_GROUP_LIST.custom_groups.groups
        return $GROUPS
    }
}

function Get-AppGroupUserMap($CONTRAST_API_URL, $CONTRAST_ORG_ID, $CONTRAST_AUTH_TOKEN, $CONTRAST_API_KEY, $GROUPS) {
    $APP_GROUP_USER_MAP = @{}
    $BUILT_IN_GROUPS = @{}
    foreach ( $GROUP in $GROUPS){
        if($GROUP.total_users -ne 0){
            $GROUP_ID = $GROUP.group_id
            $GROUP_NAME = $GROUP.name
            $USERS = $null
            $RESPONSE_USER_LIST = Invoke-RestMethod "$CONTRAST_API_URL/$CONTRAST_ORG_ID/groups/$GROUP_ID/users" -Method GET -ContentType "application/json" -Headers @{"Authorization" = "$CONTRAST_AUTH_TOKEN"; "API-Key" = "$CONTRAST_API_KEY" } 
            
            if ( $RESPONSE_USER_LIST.success ) {
                Add-Log "Groups $GROUP_NAME users details fetched successfully." $LOG_FILE
                $USERS = $RESPONSE_USER_LIST.group.users | select -Expand uid
            }
            if($GROUP.PSobject.Properties.name -match "applications"){
                foreach ( $APP in $GROUP.applications){
                    $APP_NAME = $APP.application.name
                    if( $false -eq $APP_GROUP_USER_MAP.ContainsKey($APP_NAME)){
                        $APP_GROUP_USER_MAP[$APP_NAME] = @{
                            $GROUP.name = @()
                        }
                    }
                    $APP_GROUP_USER_MAP[$APP_NAME][$GROUP.name] += $USERS
                }
            }
        }else{
            if($GROUP.PSobject.Properties.name -match "applications"){
                foreach ( $APP in $GROUP.applications){
                    $APP_NAME = $APP.application.name
                    if( $false -eq $APP_GROUP_USER_MAP.ContainsKey( $APP_NAME)){
                        $APP_GROUP_USER_MAP[$APP_NAME] = @{
                            $GROUP.name = $null
                        }
                    }
                }
            }
        }
    }
    
    return $APP_GROUP_USER_MAP
}
    
function Get-LibAppsServers($CONTRAST_API_URL, $CONTRAST_ORG_ID, $CONTRAST_AUTH_TOKEN, $CONTRAST_API_KEY, $LIB) {
    $LIB_SERVERS= @{}
    $LIB_HASH = $LIB.hash
    $LANGUAGE = $LIB.app_language
    $LANGUAGE = $LANGUAGE.ToLower()
    $LIB_NAME = $LIB.file_name
    $URL = "$CONTRAST_API_URL/$CONTRAST_ORG_ID/libraries/$LANGUAGE/$LIB_HASH`?expand=apps,skip_links"
    $RESPONSE_LIB_DETAILS = Invoke-RestMethod $URL -Method GET -ContentType "application/json" -Headers @{"Authorization" = "$CONTRAST_AUTH_TOKEN"; "API-Key" = "$CONTRAST_API_KEY" } 
            
    if ( $RESPONSE_LIB_DETAILS.success ) {
        Add-Log "LIB details $LIB_NAME fetched successfully." $LOG_FILE
        $LIB_SERVERS= $RESPONSE_LIB_DETAILS.library.servers | select -Expand name
    }
    return $LIB_SERVERS
}

$PSDefaultParameterValues['Invoke-RestMethod:SkipHeaderValidation'] = $true


$COMMAND_NAME=$MyInvocation.MyCommand.Name
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
$LOG_DIR="$scriptPath/logs"
$REPORT_DIR="$scriptPath/reports"
New-Dir-If-Not-Exist($LOG_DIR)
New-Dir-If-Not-Exist($REPORT_DIR)
if( $null -eq $CONTRAST_API_URL -or $null -eq $CONTRAST_AUTH_TOKEN -or $null -eq $CONTRAST_API_KEY -or $null -eq $CONTRAST_ORG_ID ){
    Write-Output "You must have forgot to set the following environment vatiables or update the script with default values"
    Write-Output "   - `$ENV:CONTRAST_API_URL=`"Default Contrast API URL is https://app.contrastsecurity.com/Contrast/api/ng`""
    Write-Output "   - `$ENV:CONTRAST_AUTH_TOKEN=`"Contrast user name`""
    Write-Output "   - `$ENV:CONTRAST_API_KEY=`"Contrast API Key`""
    Write-Output "   - `$ENV:CONTRAST_ORG_ID=`"Contrast Organization ID`""
    exit
}

$LOG_FILE="$LOG_DIR/$COMMAND_NAME.log"
$CURRENT_TIME = Get-Current-Time
$REPORT_FILE = "$REPORT_DIR/library_details_$CURRENT_TIME.csv"

Add-Log "Running $COMMAND_NAME $ARGUMENTS" $LOG_FILE "Create" 

Add-Log "Fetching library list from Contrast Team Server matching $LIBRARY_NAME..." $LOG_FILE

Add-Log " Fetching application access groups from Contrast Team Server..." $LOG_FILE
$GROUPS = Get-Groups-For-Org $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY 0 25

$APP_GROUP_USER_MAP = Get-AppGroupUserMap $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY $GROUPS

$LIBS = Get-LibraryForOrg $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY 0 25 $LIBRARY_NAME

Write-Output "Library Name, Version, CVE-2021-44228, Vulnerabilities, Application, Class Usage, Servers, GroupName, Users" | Out-File $REPORT_FILE
foreach( $LIB in $LIBS){
    $LIB_NAME = $LIB.file_name
    $VERSION = $LIB.version 
    $VULNS = $LIB.vulns | select -Expand name | Join-String -Separator "; "
    $CVE_2021_44228 = if ($VULNS -match "CVE-2021-44228") {"Yes"} else {"No"}
    $CLASS_COUNT = $LIB.class_count 
    $BASE_URL = $CONTRAST_API_URL -replace "/api/ng"
    # $SERVERS = Get-LibAppsServers $CONTRAST_API_URL $CONTRAST_ORG_ID $CONTRAST_AUTH_TOKEN $CONTRAST_API_KEY $LIB
    # $SERVER_NAMES = $SERVERS | Join-String -Separator ";"
    foreach($APP in $LIB.apps){
        $APP_NAME = $APP.name
        $APP_ID = $APP.app_id
        $CLASS_USED = $LIB.library_class_usage_counts | Where-Object -FilterScript {$_.appId -eq $APP_ID} | select -Expand usageCount
        $SERVER_LINK = "$BASE_URL/static/ng/index.html#/$CONTRAST_ORG_ID/servers?applications=$APP_ID"
        $GROUP = $APP_GROUP_USER_MAP[$APP_NAME]
        $GROUP_NAMES = $GROUP.keys | Join-String -Separator "; "
        $USERS = $GROUP.Values | Join-String -Separator "; "
        Write-Output "$LIB_NAME, $VERSION, $CVE_2021_44228, $VULNS, $APP_NAME, $CLASS_USED/$CLASS_COUNT, $SERVER_LINK, $GROUP_NAMES, $USERS" | Out-File $REPORT_FILE -Append
    }
}
Write-Output "Library details exported in $REPORT_FILE"
